version: '3.8'

services:
  # Backend API service
  backend:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: ai-story-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./app.db}
      - AZURE_OPENAI_KEY=${AZURE_OPENAI_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - LANGSMITH_API_KEY=${LANGSMITH_API_KEY}
      - LANGSMITH_TRACING_V2=${LANGSMITH_TRACING_V2:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - FRONTEND_URL=http://frontend-react
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    working_dir: /app/backend
    command: python main.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # React Frontend service
  frontend-react:
    build:
      context: ./frontendReact
      dockerfile: Dockerfile
    container_name: ai-story-frontend-react
    ports:
      - "3001:80"
    depends_on:
      - backend
    environment:
      - VITE_API_URL=http://localhost:8000
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # Optional PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: ai-story-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-aiuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-aipassword}
      - POSTGRES_DB=${POSTGRES_DB:-aistorydb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aiuser}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    profiles:
      - with-postgres

  # Optional Redis for caching
  redis:
    image: redis:7-alpine
    container_name: ai-story-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    profiles:
      - with-redis

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: